// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array mem;
    static Array memBlock;
    static int list;

    /** Initializes the class. */
    function void init() {
      let mem = 0;
      let memBlock = 2048;
      let list = 0;
      let memBlock[0] = 0;       
      let memBlock[1] = 14335;    
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let mem[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int i;
      let i = memBlock[list];    
      while(memBlock[i+1] < (size + 2)) {
        let i = memBlock[i];
      }
      let memBlock[i+1] = memBlock[i+1] - (size+1);
      let memBlock[memBlock[i+1] + 1] = size + 1;

      return memBlock[i+1] + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int i;
      var int size;
      let i = 0;
      while(~(memBlock[i] = 0)) {
        let i = memBlock[i];
      }
      let size = o-1;
      let memBlock[size] = 0;
      let memBlock[i] = size;

      return;
    }    
}
