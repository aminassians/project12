// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int strLen;
    field int maxL;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial strLen of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength = 0)) {
            let str = Array.new(maxLength);
        } else {        
            let str = Array.new(1);
        }
        let strLen = 0;
        let maxL = maxLength;
        return this;
    }
    

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[strLen] = c;
        let strLen = strLen + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[strLen-1] = 0;
        let strLen = strLen - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int i;
        var int diff;
        var bool makeNeg;
        let value = 0;
        let i = 0;
        let makeNeg = false;
        if (str[i] = 45) {
            let makeNeg = true;
            let i = i + 1;
        }
        while(i < strLen) {
            if ((str[i] > 47) & (str[i] < 57)) {
                let diff = str[i] - 48;
                let value = (value * 10) + diff;
                let i = i + 1;
            } else {
                if (makeNeg) {
                    let value = value * (-1);
                }
                return value;
            }
        }
        if (makeNeg) {
            let value = value * (-1);
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int len;
        var int i;
        var int c;
        let len = 0;
        let strLen = 0;             
        if (val < 0) {
            let len = len + 1;      
            do appendChar(45);     
            let val = val * (-1);
        }
        let i = val;
        let c = 1;

      
        while((i / 10) > 0) {
            let len = len + 1;
            let i = i / 10;
            let c = c * 10;
        }
        let len = len + 1;    

     
        while(c > 0) {
            do appendChar((val/c)+48);
            let val = val - (c * (val / c));
            let c = c / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
